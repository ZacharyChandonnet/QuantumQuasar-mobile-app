{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport { StatusBar } from 'expo-status-bar';\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Navbar from \"../screens/Navbar\";\nimport Nfts from \"../Nfts.json\";\nexport default function Nft(_ref) {\n  var navigation = _ref.navigation;\n  var _useState = useState(true),\n    _useState2 = _slicedToArray(_useState, 2),\n    isLoading = _useState2[0],\n    setLoading = _useState2[1];\n  var _useState3 = useState([]),\n    _useState4 = _slicedToArray(_useState3, 2),\n    Nft = _useState4[0],\n    setNft = _useState4[1];\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#121212',\n    alignItems: 'center'\n  },\n  navBar: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    width: '100%',\n    paddingHorizontal: 20,\n    paddingTop: 60\n  },\n  navItem: {\n    padding: 10\n  },\n  navText: {\n    color: 'white',\n    fontWeight: 'bold'\n  },\n  title: {\n    color: 'orange',\n    fontSize: 24,\n    fontWeight: 'bold'\n  },\n  isLoading: {\n    flex: 1,\n    backgroundColor: '#121212',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  itemContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 70,\n    borderBottomWidth: 1,\n    borderBottomColor: '#333',\n    width: '100%'\n  },\n  cryptoImage: {\n    width: 40,\n    height: 40,\n    borderRadius: 20\n  },\n  textContainer: {\n    marginLeft: 15\n  },\n  cryptoName: {\n    color: 'white',\n    fontSize: 16,\n    fontWeight: 'bold'\n  },\n  cryptoSymbol: {\n    color: '#888',\n    fontSize: 14,\n    marginTop: 5\n  },\n  price: {\n    color: 'white',\n    fontSize: 14,\n    marginTop: 5\n  }\n});","map":{"version":3,"names":["React","useEffect","useState","View","Text","StyleSheet","ImageBackground","TouchableOpacity","Animated","ActivityIndicator","StatusBar","FlatList","Navbar","Nfts","Nft","_ref","navigation","_useState","_useState2","_slicedToArray","isLoading","setLoading","_useState3","_useState4","setNft","styles","create","container","flex","backgroundColor","alignItems","navBar","flexDirection","justifyContent","width","paddingHorizontal","paddingTop","navItem","padding","navText","color","fontWeight","title","fontSize","itemContainer","borderBottomWidth","borderBottomColor","cryptoImage","height","borderRadius","textContainer","marginLeft","cryptoName","cryptoSymbol","marginTop","price"],"sources":["D:/0-ProjetPerso/QuantumQuasar/QuantumQuasar/screens/Nft.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { View, Text, StyleSheet, ImageBackground, TouchableOpacity, Animated, ActivityIndicator } from 'react-native';\r\nimport { StatusBar } from 'expo-status-bar';\r\nimport { FlatList } from 'react-native';\r\nimport Navbar from '../screens/Navbar';\r\nimport Nfts from '../Nfts.json';\r\n\r\n\r\nexport default function Nft({ navigation }) {\r\n    const [isLoading, setLoading] = useState(true);\r\n    const [Nft, setNft] = useState([]);\r\n\r\n    // useEffect(() => {\r\n    //     const fetchData = async () => {\r\n    //         try {\r\n    //             const response = await fetch('https://api.coingecko.com/api/v3/nfts/list')\r\n    //             const resultat = await response.json();\r\n    //             if (Array.isArray(resultat)) {\r\n    //                 const randomNfts = resultat.sort(() => 0.5 - Math.random()).slice(0, 20);\r\n    //                 setNft(randomNfts);\r\n    //                 console.log(randomNfts);\r\n    //                 setTimeout(() => {\r\n    //                     setLoading(false);\r\n    //                 }, 500);\r\n    //             } else {\r\n    //                 console.error(\"API response is not an array:\", resultat);\r\n    //             }\r\n    //         } catch (error) {\r\n    //             console.error(\"Error fetching NFT:\", error);\r\n    //         }\r\n    //     };\r\n    //     fetchData();\r\n    // }, []);\r\n    // if (isLoading) {\r\n    //     return <ActivityIndicator size=\"large\" color=\"orange\" style={styles.isLoading} />;\r\n    // }\r\n    // return (\r\n    //     <View style={styles.container}>\r\n    //         <Navbar style={styles.navBar} navigation={navigation} />\r\n    //         <FlatList\r\n    //             data={Nft}\r\n    //             keyExtractor={(item) => item.id.toString()}\r\n    //             renderItem={({ item }) => (\r\n    //                 <TouchableOpacity\r\n    //                     style={styles.itemContainer}\r\n    //                     onPress={() => navigation.navigate('Details', { id: item.id })}\r\n    //                 >\r\n    //                     <View style={styles.textContainer}>\r\n    //                         <Text style={styles.cryptoName}>{item.name}</Text>\r\n    //                     </View>\r\n    //                 </TouchableOpacity>\r\n    //             )}\r\n    //         />\r\n    //     </View >\r\n    // )\r\n\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n        backgroundColor: '#121212',\r\n        alignItems: 'center',\r\n    },\r\n    navBar: {\r\n        flexDirection: 'row',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center',\r\n        width: '100%',\r\n        paddingHorizontal: 20,\r\n        paddingTop: 60,\r\n    },\r\n    navItem: {\r\n        padding: 10,\r\n    },\r\n    navText: {\r\n        color: 'white',\r\n        fontWeight: 'bold',\r\n    },\r\n    title: {\r\n        color: 'orange',\r\n        fontSize: 24,\r\n        fontWeight: 'bold',\r\n    },\r\n    isLoading: {\r\n        flex: 1,\r\n        backgroundColor: '#121212',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    },\r\n    itemContainer: {\r\n        flexDirection: 'row',\r\n        alignItems: 'center',\r\n        padding: 70,\r\n        borderBottomWidth: 1,\r\n        borderBottomColor: '#333',\r\n        width: '100%',\r\n    },\r\n    cryptoImage: {\r\n        width: 40,\r\n        height: 40,\r\n        borderRadius: 20,\r\n    },\r\n    textContainer: {\r\n        marginLeft: 15,\r\n    },\r\n    cryptoName: {\r\n        color: 'white',\r\n        fontSize: 16,\r\n        fontWeight: 'bold',\r\n    },\r\n    cryptoSymbol: {\r\n        color: '#888',\r\n        fontSize: 14,\r\n        marginTop: 5,\r\n    },\r\n    price: {\r\n        color: 'white',\r\n        fontSize: 14,\r\n        marginTop: 5,\r\n    },\r\n})\r\n\r\n\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,OAAAC,IAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,UAAA;AAAA,OAAAC,eAAA;AAAA,OAAAC,gBAAA;AAAA,OAAAC,QAAA;AAAA,OAAAC,iBAAA;AAEnD,SAASC,SAAS,QAAQ,iBAAiB;AAAC,OAAAC,QAAA;AAE5C,OAAOC,MAAM;AACb,OAAOC,IAAI;AAGX,eAAe,SAASC,GAAGA,CAAAC,IAAA,EAAiB;EAAA,IAAdC,UAAU,GAAAD,IAAA,CAAVC,UAAU;EACpC,IAAAC,SAAA,GAAgCf,QAAQ,CAAC,IAAI,CAAC;IAAAgB,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAAvCG,SAAS,GAAAF,UAAA;IAAEG,UAAU,GAAAH,UAAA;EAC5B,IAAAI,UAAA,GAAsBpB,QAAQ,CAAC,EAAE,CAAC;IAAAqB,UAAA,GAAAJ,cAAA,CAAAG,UAAA;IAA3BR,GAAG,GAAAS,UAAA;IAAEC,MAAM,GAAAD,UAAA;AA8CtB;AAEA,IAAME,MAAM,GAAGpB,UAAU,CAACqB,MAAM,CAAC;EAC7BC,SAAS,EAAE;IACPC,IAAI,EAAE,CAAC;IACPC,eAAe,EAAE,SAAS;IAC1BC,UAAU,EAAE;EAChB,CAAC;EACDC,MAAM,EAAE;IACJC,aAAa,EAAE,KAAK;IACpBC,cAAc,EAAE,eAAe;IAC/BH,UAAU,EAAE,QAAQ;IACpBI,KAAK,EAAE,MAAM;IACbC,iBAAiB,EAAE,EAAE;IACrBC,UAAU,EAAE;EAChB,CAAC;EACDC,OAAO,EAAE;IACLC,OAAO,EAAE;EACb,CAAC;EACDC,OAAO,EAAE;IACLC,KAAK,EAAE,OAAO;IACdC,UAAU,EAAE;EAChB,CAAC;EACDC,KAAK,EAAE;IACHF,KAAK,EAAE,QAAQ;IACfG,QAAQ,EAAE,EAAE;IACZF,UAAU,EAAE;EAChB,CAAC;EACDrB,SAAS,EAAE;IACPQ,IAAI,EAAE,CAAC;IACPC,eAAe,EAAE,SAAS;IAC1BC,UAAU,EAAE,QAAQ;IACpBG,cAAc,EAAE;EACpB,CAAC;EACDW,aAAa,EAAE;IACXZ,aAAa,EAAE,KAAK;IACpBF,UAAU,EAAE,QAAQ;IACpBQ,OAAO,EAAE,EAAE;IACXO,iBAAiB,EAAE,CAAC;IACpBC,iBAAiB,EAAE,MAAM;IACzBZ,KAAK,EAAE;EACX,CAAC;EACDa,WAAW,EAAE;IACTb,KAAK,EAAE,EAAE;IACTc,MAAM,EAAE,EAAE;IACVC,YAAY,EAAE;EAClB,CAAC;EACDC,aAAa,EAAE;IACXC,UAAU,EAAE;EAChB,CAAC;EACDC,UAAU,EAAE;IACRZ,KAAK,EAAE,OAAO;IACdG,QAAQ,EAAE,EAAE;IACZF,UAAU,EAAE;EAChB,CAAC;EACDY,YAAY,EAAE;IACVb,KAAK,EAAE,MAAM;IACbG,QAAQ,EAAE,EAAE;IACZW,SAAS,EAAE;EACf,CAAC;EACDC,KAAK,EAAE;IACHf,KAAK,EAAE,OAAO;IACdG,QAAQ,EAAE,EAAE;IACZW,SAAS,EAAE;EACf;AACJ,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}