{"ast":null,"code":"import React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport NftsData from \"../Nfts.json\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function Nft(_ref) {\n  var navigation = _ref.navigation;\n  return _jsx(View, {\n    style: styles.container,\n    children: _jsx(FlatList, {\n      data: NftsData,\n      keyExtractor: function keyExtractor(item) {\n        return item.id.toString();\n      },\n      renderItem: function renderItem(_ref2) {\n        var item = _ref2.item;\n        return _jsx(TouchableOpacity, {\n          style: styles.itemContainer,\n          onPress: function onPress() {\n            return navigation.navigate('Details', {\n              id: item.id\n            });\n          },\n          children: _jsxs(View, {\n            style: styles.textContainer,\n            children: [_jsx(Image, {\n              source: {\n                uri: item.image.small\n              },\n              style: styles.cryptoImage\n            }), _jsx(Text, {\n              style: styles.cryptoName,\n              children: item.name\n            })]\n          })\n        });\n      }\n    })\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#121212',\n    alignItems: 'center'\n  },\n  itemContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 10,\n    borderBottomWidth: 1,\n    borderBottomColor: '#333',\n    width: '100%'\n  },\n  textContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginLeft: 15\n  },\n  cryptoImage: {\n    width: 40,\n    height: 40,\n    borderRadius: 20\n  },\n  cryptoName: {\n    color: 'white',\n    fontSize: 16,\n    fontWeight: 'bold',\n    marginLeft: 10\n  }\n});","map":{"version":3,"names":["React","useState","View","Text","StyleSheet","TouchableOpacity","FlatList","Image","NftsData","jsx","_jsx","jsxs","_jsxs","Nft","_ref","navigation","style","styles","container","children","data","keyExtractor","item","id","toString","renderItem","_ref2","itemContainer","onPress","navigate","textContainer","source","uri","image","small","cryptoImage","cryptoName","name","create","flex","backgroundColor","alignItems","flexDirection","padding","borderBottomWidth","borderBottomColor","width","marginLeft","height","borderRadius","color","fontSize","fontWeight"],"sources":["D:/0-ProjetPerso/QuantumQuasar/QuantumQuasar/screens/Nft.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { View, Text, StyleSheet, TouchableOpacity, FlatList, Image } from 'react-native';\r\nimport NftsData from '../Nfts.json';\r\n\r\nexport default function Nft({ navigation }) {\r\n  return (\r\n    <View style={styles.container}>\r\n      <FlatList\r\n        data={NftsData}\r\n        keyExtractor={(item) => item.id.toString()}\r\n        renderItem={({ item }) => (\r\n          <TouchableOpacity\r\n            style={styles.itemContainer}\r\n            onPress={() => navigation.navigate('Details', { id: item.id })}\r\n          >\r\n            <View style={styles.textContainer}>\r\n              <Image\r\n                source={{ uri: item.image.small }}\r\n                style={styles.cryptoImage}\r\n              />\r\n              <Text style={styles.cryptoName}>{item.name}</Text>\r\n            </View>\r\n          </TouchableOpacity>\r\n        )}\r\n      />\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: '#121212',\r\n    alignItems: 'center',\r\n  },\r\n  itemContainer: {\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n    padding: 10,\r\n    borderBottomWidth: 1,\r\n    borderBottomColor: '#333',\r\n    width: '100%',\r\n  },\r\n  textContainer: {\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n    marginLeft: 15,\r\n  },\r\n  cryptoImage: {\r\n    width: 40,\r\n    height: 40,\r\n    borderRadius: 20,\r\n  },\r\n  cryptoName: {\r\n    color: 'white',\r\n    fontSize: 16,\r\n    fontWeight: 'bold',\r\n    marginLeft: 10,\r\n  },\r\n});\r\n"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,OAAAC,IAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,UAAA;AAAA,OAAAC,gBAAA;AAAA,OAAAC,QAAA;AAAA,OAAAC,KAAA;AAExC,OAAOC,QAAQ;AAAqB,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAEpC,eAAe,SAASC,GAAGA,CAAAC,IAAA,EAAiB;EAAA,IAAdC,UAAU,GAAAD,IAAA,CAAVC,UAAU;EACtC,OACEL,IAAA,CAACR,IAAI;IAACc,KAAK,EAAEC,MAAM,CAACC,SAAU;IAAAC,QAAA,EAC5BT,IAAA,CAACJ,QAAQ;MACPc,IAAI,EAAEZ,QAAS;MACfa,YAAY,EAAE,SAAAA,aAACC,IAAI;QAAA,OAAKA,IAAI,CAACC,EAAE,CAACC,QAAQ,CAAC,CAAC;MAAA,CAAC;MAC3CC,UAAU,EAAE,SAAAA,WAAAC,KAAA;QAAA,IAAGJ,IAAI,GAAAI,KAAA,CAAJJ,IAAI;QAAA,OACjBZ,IAAA,CAACL,gBAAgB;UACfW,KAAK,EAAEC,MAAM,CAACU,aAAc;UAC5BC,OAAO,EAAE,SAAAA,QAAA;YAAA,OAAMb,UAAU,CAACc,QAAQ,CAAC,SAAS,EAAE;cAAEN,EAAE,EAAED,IAAI,CAACC;YAAG,CAAC,CAAC;UAAA,CAAC;UAAAJ,QAAA,EAE/DP,KAAA,CAACV,IAAI;YAACc,KAAK,EAAEC,MAAM,CAACa,aAAc;YAAAX,QAAA,GAChCT,IAAA,CAACH,KAAK;cACJwB,MAAM,EAAE;gBAAEC,GAAG,EAAEV,IAAI,CAACW,KAAK,CAACC;cAAM,CAAE;cAClClB,KAAK,EAAEC,MAAM,CAACkB;YAAY,CAC3B,CAAC,EACFzB,IAAA,CAACP,IAAI;cAACa,KAAK,EAAEC,MAAM,CAACmB,UAAW;cAAAjB,QAAA,EAAEG,IAAI,CAACe;YAAI,CAAO,CAAC;UAAA,CAC9C;QAAC,CACS,CAAC;MAAA;IACnB,CACH;EAAC,CACE,CAAC;AAEX;AAEA,IAAMpB,MAAM,GAAGb,UAAU,CAACkC,MAAM,CAAC;EAC/BpB,SAAS,EAAE;IACTqB,IAAI,EAAE,CAAC;IACPC,eAAe,EAAE,SAAS;IAC1BC,UAAU,EAAE;EACd,CAAC;EACDd,aAAa,EAAE;IACbe,aAAa,EAAE,KAAK;IACpBD,UAAU,EAAE,QAAQ;IACpBE,OAAO,EAAE,EAAE;IACXC,iBAAiB,EAAE,CAAC;IACpBC,iBAAiB,EAAE,MAAM;IACzBC,KAAK,EAAE;EACT,CAAC;EACDhB,aAAa,EAAE;IACbY,aAAa,EAAE,KAAK;IACpBD,UAAU,EAAE,QAAQ;IACpBM,UAAU,EAAE;EACd,CAAC;EACDZ,WAAW,EAAE;IACXW,KAAK,EAAE,EAAE;IACTE,MAAM,EAAE,EAAE;IACVC,YAAY,EAAE;EAChB,CAAC;EACDb,UAAU,EAAE;IACVc,KAAK,EAAE,OAAO;IACdC,QAAQ,EAAE,EAAE;IACZC,UAAU,EAAE,MAAM;IAClBL,UAAU,EAAE;EACd;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}