{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport NftsData from \"../Nfts.json\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function Nft(_ref) {\n  var navigation = _ref.navigation;\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    randomNfts = _useState2[0],\n    setRandomNfts = _useState2[1];\n  useEffect(function () {\n    var shuffledNfts = _toConsumableArray(NftsData).sort(function () {\n      return Math.random() - 0.5;\n    });\n    setRandomNfts(shuffledNfts);\n  }, []);\n  return _jsx(View, {\n    style: styles.container,\n    children: _jsx(FlatList, {\n      data: randomNfts,\n      keyExtractor: function keyExtractor(item) {\n        return item.id.toString();\n      },\n      renderItem: function renderItem(_ref2) {\n        var item = _ref2.item;\n        return _jsx(TouchableOpacity, {\n          style: styles.itemContainer,\n          onPress: function onPress() {\n            return navigation.navigate('Details', {\n              id: item.id\n            });\n          },\n          children: _jsxs(View, {\n            style: styles.textContainer,\n            children: [_jsx(Image, {\n              source: {\n                uri: item.image.small\n              },\n              style: styles.cryptoImage\n            }), _jsxs(View, {\n              children: [_jsx(Text, {\n                style: styles.cryptoName,\n                children: item.name\n              }), _jsxs(Text, {\n                style: styles.cryptoInfo,\n                children: [\"Abbr\\xE9viation: \", item.abbr.toUpperCase(), \" - Prix: \", item.price]\n              })]\n            })]\n          })\n        });\n      }\n    })\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#121212',\n    alignItems: 'center'\n  },\n  itemContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 10,\n    borderBottomWidth: 1,\n    borderBottomColor: '#333',\n    width: '100%'\n  },\n  textContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginLeft: 15\n  },\n  cryptoImage: {\n    width: 40,\n    height: 40,\n    borderRadius: 20\n  },\n  cryptoName: {\n    color: 'white',\n    fontSize: 16,\n    fontWeight: 'bold',\n    marginLeft: 10\n  }\n});","map":{"version":3,"names":["React","useState","View","Text","StyleSheet","TouchableOpacity","FlatList","Image","NftsData","jsx","_jsx","jsxs","_jsxs","Nft","_ref","navigation","_useState","_useState2","_slicedToArray","randomNfts","setRandomNfts","useEffect","shuffledNfts","_toConsumableArray","sort","Math","random","style","styles","container","children","data","keyExtractor","item","id","toString","renderItem","_ref2","itemContainer","onPress","navigate","textContainer","source","uri","image","small","cryptoImage","cryptoName","name","cryptoInfo","abbr","toUpperCase","price","create","flex","backgroundColor","alignItems","flexDirection","padding","borderBottomWidth","borderBottomColor","width","marginLeft","height","borderRadius","color","fontSize","fontWeight"],"sources":["D:/0-ProjetPerso/QuantumQuasar/QuantumQuasar/screens/Nft.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { View, Text, StyleSheet, TouchableOpacity, FlatList, Image } from 'react-native';\r\nimport NftsData from '../Nfts.json';\r\n\r\nexport default function Nft({ navigation }) {\r\n    const [randomNfts, setRandomNfts] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const shuffledNfts = [...NftsData].sort(() => Math.random() - 0.5);\r\n        setRandomNfts(shuffledNfts);\r\n    }, []);\r\n\r\n    return (\r\n        <View style={styles.container}>\r\n            <FlatList\r\n                data={randomNfts}\r\n                keyExtractor={(item) => item.id.toString()}\r\n                renderItem={({ item }) => (\r\n                    <TouchableOpacity\r\n                        style={styles.itemContainer}\r\n                        onPress={() => navigation.navigate('Details', { id: item.id })}\r\n                    >\r\n                        <View style={styles.textContainer}>\r\n                            <Image\r\n                                source={{ uri: item.image.small }}\r\n                                style={styles.cryptoImage}\r\n                            />\r\n                            <View>\r\n                                <Text style={styles.cryptoName}>{item.name}</Text>\r\n                                <Text style={styles.cryptoInfo}>\r\n                                    Abbr√©viation: {item.abbr.toUpperCase()} - Prix: {item.price}\r\n                                </Text>\r\n                            </View>\r\n                        </View>\r\n                    </TouchableOpacity>\r\n                )}\r\n            />\r\n        </View>\r\n    );\r\n}\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n        backgroundColor: '#121212',\r\n        alignItems: 'center',\r\n    },\r\n    itemContainer: {\r\n        flexDirection: 'row',\r\n        alignItems: 'center',\r\n        padding: 10,\r\n        borderBottomWidth: 1,\r\n        borderBottomColor: '#333',\r\n        width: '100%',\r\n    },\r\n    textContainer: {\r\n        flexDirection: 'row',\r\n        alignItems: 'center',\r\n        marginLeft: 15,\r\n    },\r\n    cryptoImage: {\r\n        width: 40,\r\n        height: 40,\r\n        borderRadius: 20,\r\n    },\r\n    cryptoName: {\r\n        color: 'white',\r\n        fontSize: 16,\r\n        fontWeight: 'bold',\r\n        marginLeft: 10,\r\n    },\r\n});\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}