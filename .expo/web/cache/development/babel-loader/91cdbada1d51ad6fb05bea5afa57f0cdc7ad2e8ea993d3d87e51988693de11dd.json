{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport NftsData from \"../Nfts.json\";\nimport NavBar from \"./Navbar\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function Nft(_ref) {\n  var navigation = _ref.navigation;\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    randomNfts = _useState2[0],\n    setRandomNfts = _useState2[1];\n  useEffect(function () {\n    var shuffledNfts = _toConsumableArray(NftsData).sort(function () {\n      return Math.random() - 0.5;\n    });\n    setRandomNfts(shuffledNfts);\n  }, []);\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(NavBar, {\n      style: styles.navBar,\n      navigation: navigation\n    }), _jsx(FlatList, {\n      data: randomNfts,\n      keyExtractor: function keyExtractor(item) {\n        return item.id.toString();\n      },\n      renderItem: function renderItem(_ref2) {\n        var item = _ref2.item;\n        return _jsx(TouchableOpacity, {\n          style: styles.itemContainer,\n          onPress: function onPress() {\n            return navigation.navigate('Details', {\n              id: item.id\n            });\n          },\n          children: _jsxs(View, {\n            style: styles.textContainer,\n            children: [_jsx(Image, {\n              source: {\n                uri: item.image.small\n              },\n              style: styles.cryptoImage\n            }), _jsxs(View, {\n              children: [_jsx(Text, {\n                style: styles.cryptoName,\n                children: item.name\n              }), _jsxs(Text, {\n                style: styles.price,\n                children: [item.floor_price.usd, \" USD\"]\n              })]\n            })]\n          })\n        });\n      }\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#121212',\n    alignItems: 'center'\n  },\n  navBar: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    width: '100%',\n    paddingHorizontal: 20,\n    paddingTop: 60\n  },\n  itemContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 70,\n    borderBottomWidth: 1,\n    borderBottomColor: '#333',\n    width: '100%'\n  },\n  textContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginLeft: 15\n  },\n  cryptoImage: {\n    width: 40,\n    height: 40,\n    borderRadius: 20\n  },\n  cryptoName: {\n    color: 'white',\n    fontSize: 16,\n    fontWeight: 'bold'\n  },\n  cryptoSymbol: {\n    color: '#888',\n    fontSize: 14,\n    marginTop: 5\n  },\n  price: {\n    color: 'white',\n    fontSize: 14,\n    marginTop: 5\n  }\n});","map":{"version":3,"names":["React","useEffect","useState","View","Text","StyleSheet","TouchableOpacity","FlatList","Image","NftsData","NavBar","jsx","_jsx","jsxs","_jsxs","Nft","_ref","navigation","_useState","_useState2","_slicedToArray","randomNfts","setRandomNfts","shuffledNfts","_toConsumableArray","sort","Math","random","style","styles","container","children","navBar","data","keyExtractor","item","id","toString","renderItem","_ref2","itemContainer","onPress","navigate","textContainer","source","uri","image","small","cryptoImage","cryptoName","name","price","floor_price","usd","create","flex","backgroundColor","alignItems","flexDirection","justifyContent","width","paddingHorizontal","paddingTop","padding","borderBottomWidth","borderBottomColor","marginLeft","height","borderRadius","color","fontSize","fontWeight","cryptoSymbol","marginTop"],"sources":["D:/0-ProjetPerso/QuantumQuasar/QuantumQuasar/screens/Nft.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { View, Text, StyleSheet, TouchableOpacity, FlatList, Image } from 'react-native';\r\nimport NftsData from '../Nfts.json';\r\nimport NavBar from './Navbar';\r\n\r\nexport default function Nft({ navigation }) {\r\n    const [randomNfts, setRandomNfts] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const shuffledNfts = [...NftsData].sort(() => Math.random() - 0.5);\r\n        setRandomNfts(shuffledNfts);\r\n    }, []);\r\n\r\n    return (\r\n        <View style={styles.container}>\r\n            <NavBar style={styles.navBar} navigation={navigation} />\r\n            <FlatList\r\n                data={randomNfts}\r\n                keyExtractor={(item) => item.id.toString()}\r\n                renderItem={({ item }) => (\r\n                    <TouchableOpacity\r\n                        style={styles.itemContainer}\r\n                        onPress={() => navigation.navigate('Details', { id: item.id })}\r\n                    >\r\n                        <View style={styles.textContainer}>\r\n                            <Image\r\n                                source={{ uri: item.image.small }}\r\n                                style={styles.cryptoImage}\r\n                            />\r\n                            <View>\r\n                                <Text style={styles.cryptoName}>{item.name}</Text>\r\n                                {/* <Text style={styles.cryptoSymbol}>{item.symbol.toUpperCase()}</Text> */}\r\n                                <Text style={styles.price}>{item.floor_price.usd} USD</Text>\r\n                            </View>\r\n                        </View>\r\n                    </TouchableOpacity>\r\n                )}\r\n            />\r\n        </View>\r\n    );\r\n}\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n        backgroundColor: '#121212',\r\n        alignItems: 'center',\r\n    },\r\n    navBar: {\r\n        flexDirection: 'row',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center',\r\n        width: '100%',\r\n        paddingHorizontal: 20,\r\n        paddingTop: 60,\r\n    },\r\n    itemContainer: {\r\n        flexDirection: 'row',\r\n        alignItems: 'center',\r\n        padding: 70,\r\n        borderBottomWidth: 1,\r\n        borderBottomColor: '#333',\r\n        width: '100%',\r\n    },\r\n    textContainer: {\r\n        flexDirection: 'row',\r\n        alignItems: 'center',\r\n        marginLeft: 15,\r\n    },\r\n    cryptoImage: {\r\n        width: 40,\r\n        height: 40,\r\n        borderRadius: 20,\r\n    },\r\n    cryptoName: {\r\n        color: 'white',\r\n        fontSize: 16,\r\n        fontWeight: 'bold',\r\n    },\r\n    cryptoSymbol: {\r\n        color: '#888',\r\n        fontSize: 14,\r\n        marginTop: 5,\r\n    },\r\n    price: {\r\n        color: 'white',\r\n        fontSize: 14,\r\n        marginTop: 5,\r\n    },\r\n});\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,OAAAC,IAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,UAAA;AAAA,OAAAC,gBAAA;AAAA,OAAAC,QAAA;AAAA,OAAAC,KAAA;AAEnD,OAAOC,QAAQ;AACf,OAAOC,MAAM;AAAiB,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAE9B,eAAe,SAASC,GAAGA,CAAAC,IAAA,EAAiB;EAAA,IAAdC,UAAU,GAAAD,IAAA,CAAVC,UAAU;EACpC,IAAAC,SAAA,GAAoChB,QAAQ,CAAC,EAAE,CAAC;IAAAiB,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAAzCG,UAAU,GAAAF,UAAA;IAAEG,aAAa,GAAAH,UAAA;EAEhClB,SAAS,CAAC,YAAM;IACZ,IAAMsB,YAAY,GAAGC,kBAAA,CAAIf,QAAQ,EAAEgB,IAAI,CAAC;MAAA,OAAMC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG;IAAA,EAAC;IAClEL,aAAa,CAACC,YAAY,CAAC;EAC/B,CAAC,EAAE,EAAE,CAAC;EAEN,OACIT,KAAA,CAACX,IAAI;IAACyB,KAAK,EAAEC,MAAM,CAACC,SAAU;IAAAC,QAAA,GAC1BnB,IAAA,CAACF,MAAM;MAACkB,KAAK,EAAEC,MAAM,CAACG,MAAO;MAACf,UAAU,EAAEA;IAAW,CAAE,CAAC,EACxDL,IAAA,CAACL,QAAQ;MACL0B,IAAI,EAAEZ,UAAW;MACjBa,YAAY,EAAE,SAAAA,aAACC,IAAI;QAAA,OAAKA,IAAI,CAACC,EAAE,CAACC,QAAQ,CAAC,CAAC;MAAA,CAAC;MAC3CC,UAAU,EAAE,SAAAA,WAAAC,KAAA;QAAA,IAAGJ,IAAI,GAAAI,KAAA,CAAJJ,IAAI;QAAA,OACfvB,IAAA,CAACN,gBAAgB;UACbsB,KAAK,EAAEC,MAAM,CAACW,aAAc;UAC5BC,OAAO,EAAE,SAAAA,QAAA;YAAA,OAAMxB,UAAU,CAACyB,QAAQ,CAAC,SAAS,EAAE;cAAEN,EAAE,EAAED,IAAI,CAACC;YAAG,CAAC,CAAC;UAAA,CAAC;UAAAL,QAAA,EAE/DjB,KAAA,CAACX,IAAI;YAACyB,KAAK,EAAEC,MAAM,CAACc,aAAc;YAAAZ,QAAA,GAC9BnB,IAAA,CAACJ,KAAK;cACFoC,MAAM,EAAE;gBAAEC,GAAG,EAAEV,IAAI,CAACW,KAAK,CAACC;cAAM,CAAE;cAClCnB,KAAK,EAAEC,MAAM,CAACmB;YAAY,CAC7B,CAAC,EACFlC,KAAA,CAACX,IAAI;cAAA4B,QAAA,GACDnB,IAAA,CAACR,IAAI;gBAACwB,KAAK,EAAEC,MAAM,CAACoB,UAAW;gBAAAlB,QAAA,EAAEI,IAAI,CAACe;cAAI,CAAO,CAAC,EAElDpC,KAAA,CAACV,IAAI;gBAACwB,KAAK,EAAEC,MAAM,CAACsB,KAAM;gBAAApB,QAAA,GAAEI,IAAI,CAACiB,WAAW,CAACC,GAAG,EAAC,MAAI;cAAA,CAAM,CAAC;YAAA,CAC1D,CAAC;UAAA,CACL;QAAC,CACO,CAAC;MAAA;IACrB,CACL,CAAC;EAAA,CACA,CAAC;AAEf;AACA,IAAMxB,MAAM,GAAGxB,UAAU,CAACiD,MAAM,CAAC;EAC7BxB,SAAS,EAAE;IACPyB,IAAI,EAAE,CAAC;IACPC,eAAe,EAAE,SAAS;IAC1BC,UAAU,EAAE;EAChB,CAAC;EACDzB,MAAM,EAAE;IACJ0B,aAAa,EAAE,KAAK;IACpBC,cAAc,EAAE,eAAe;IAC/BF,UAAU,EAAE,QAAQ;IACpBG,KAAK,EAAE,MAAM;IACbC,iBAAiB,EAAE,EAAE;IACrBC,UAAU,EAAE;EAChB,CAAC;EACDtB,aAAa,EAAE;IACXkB,aAAa,EAAE,KAAK;IACpBD,UAAU,EAAE,QAAQ;IACpBM,OAAO,EAAE,EAAE;IACXC,iBAAiB,EAAE,CAAC;IACpBC,iBAAiB,EAAE,MAAM;IACzBL,KAAK,EAAE;EACX,CAAC;EACDjB,aAAa,EAAE;IACXe,aAAa,EAAE,KAAK;IACpBD,UAAU,EAAE,QAAQ;IACpBS,UAAU,EAAE;EAChB,CAAC;EACDlB,WAAW,EAAE;IACTY,KAAK,EAAE,EAAE;IACTO,MAAM,EAAE,EAAE;IACVC,YAAY,EAAE;EAClB,CAAC;EACDnB,UAAU,EAAE;IACRoB,KAAK,EAAE,OAAO;IACdC,QAAQ,EAAE,EAAE;IACZC,UAAU,EAAE;EAChB,CAAC;EACDC,YAAY,EAAE;IACVH,KAAK,EAAE,MAAM;IACbC,QAAQ,EAAE,EAAE;IACZG,SAAS,EAAE;EACf,CAAC;EACDtB,KAAK,EAAE;IACHkB,KAAK,EAAE,OAAO;IACdC,QAAQ,EAAE,EAAE;IACZG,SAAS,EAAE;EACf;AACJ,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}